/**
 打印螺旋数组

如：
n = 3时
1 2 3
8 9	4
7 6 5
---
1,2 -> 3,4 -> 5,6 -> 7,8 (第一圈）


n=4时
1  2  3  4
12 13 14 5
11 16 15 6
10 9  8  7
---
1,2,3 -> 4,5,6 -> 7,8,9 -> 10,11,12(第一圈）
13 -> 14 -> 15 -> 16 (第二圈）

n=5时
1  2  3  4  5
16 17 18 19 6
15 24 25 20 7
14 23 22 21 8
13 12 11 10 9
---
1,2,3,4 -> 5,6,7,8 -> 9,10,11,12 -> 13,14,15,16（第一圈）
17,18 -> 19,20 -> 21,22 -> 23,24 (第二圈）


分析：
	n为奇数时， 有n/2圈，中间数字为n^2
	n为偶数时， 也有n/2圈， 中间没数字
*/
package main

import "fmt"

func screwArray(n int) [][]int {
	arr := make([][]int, n, n) // n*n
	for i := 0; i < n; i++ {
		arr[i] = make([]int, n, n)
	}

	// n为奇数时
	if n&1 == 1 {
		arr[n/2][n/2] = n * n
	}

	// 行索引， 列索引， 圈数（第几圈，从0开始）， 当前数字（顺序数)
	var i, j, c, num int
	for c = 0; c < n/2; c++ { // 循环圈数，无论n为奇偶， 均为n/2圈
		// 第c圈， 向右, 行不变=c， 列为[c, n-c-2]
		i = c
		for j = c; j <= n-c-2; j++ {
			num++
			arr[i][j] = num
		}

		// 第c圈， 向下， 列不变=n-c-1， 行为[c, n-c-2]
		j = n - c - 1
		for i = c; i <= n-c-2; i++ {
			num++
			arr[i][j] = num
		}

		// 第c圈， 向左， 行不变=n-c-1， 列为[n-c-1, c+1]
		i = n - c - 1
		for j = n - c - 1; j >= c; j-- {
			num++
			arr[i][j] = num
		}

		// 第c圈， 向上， 列不变=c， 行为[n-c-1, c+1]
		j = c
		for i = n - c - 1; i >= c+1; i-- {
			num++
			arr[i][j] = num
		}
	}

	return arr
}

func outputArr(arr [][]int) {
	n := len(arr[0])
	for i := 0; i < n; i++ {
		for j := 0; j < n; j++ {
			fmt.Printf("%2d ", arr[i][j])
		}
		fmt.Printf("\n")
	}
}

// 1  2  3  4  5
// 17 18 19 20  6
// 16 26 25 21  7
// 15 25 23 22  8
// 14 12 11 10  9
//
// 1  2  3  4  5  6
// 21 22 23 24 25  7
// 20 34 35 36 26  8
// 19 33 39 37 27  9
// 18 32 30 29 28 10
// 17 15 14 13 12 11
//
// 1  2  3  4  5  6  7
// 25 26 27 28 29 30  8
// 24 42 43 44 45 31  9
// 23 41 51 49 46 32 10
// 22 40 50 48 47 33 11
// 21 39 37 36 35 34 12
// 20 18 17 16 15 14 13
func main() {
	outputArr(screwArray(5))
	fmt.Println()
	outputArr(screwArray(6))
	fmt.Println()
	outputArr(screwArray(7))
}
